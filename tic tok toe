<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe</title>
    <style>
        #board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            grid-gap: 10px;
        }
        .cell {
            width: 50px;
            height: 50px;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 24px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="board">
        <div class="cell" id="cell-0"></div>
        <div class="cell" id="cell-1"></div>
        <div class="cell" id="cell-2"></div>
        <div class="cell" id="cell-3"></div>
        <div class="cell" id="cell-4"></div>
        <div class="cell" id="cell-5"></div>
        <div class="cell" id="cell-6"></div>
        <div class="cell" id="cell-7"></div>
        <div class="cell" id="cell-8"></div>
    </div>
    <script>
        class TicTacToe {
            constructor() {
                this.board = Array(9).fill('-');
                this.playerTurn = 'X';
                this.result = null;
                this.cells = document.querySelectorAll('.cell');
                this.cells.forEach((cell, index) => {
                    cell.addEventListener('click', () => {
                        this.handleClick(index);
                    });
                });
                this.drawBoard();
                this.playAlphaBeta();
            }

            drawBoard() {
                this.cells.forEach((cell, index) => {
                    cell.textContent = this.board[index];
                });
            }

            isEndOfGame() {
                const winConditions = [
                    [0, 1, 2],
                    [3, 4, 5],
                    [6, 7, 8],
                    [0, 3, 6],
                    [1, 4, 7],
                    [2, 5, 8],
                    [0, 4, 8],
                    [2, 4, 6],
                ];
                for (const condition of winConditions) {
                    if (
                        this.board[condition[0]] === this.board[condition[1]] &&
                        this.board[condition[1]] === this.board[condition[2]] &&
                        this.board[condition[0]] !== '-'
                    ) {
                        return this.board[condition[0]];
                    }
                }
                if (!this.board.includes('-')) {
                    return '-';
                }
                return null;
            }

            maxAlphaBeta(alpha, beta) {
                let maxv = -Infinity;
                let px = null;
                const result = this.isEndOfGame();
                if (result === 'X') {
                    return [-1, 0];
                } else if (result === 'O') {
                    return [1, 0];
                } else if (result === '-') {
                    return [0, 0];
                }

                for (let i = 0; i < 9; i++) {
                    if (this.board[i] === '-') {
                        this.board[i] = 'O';
                        const [m, _] = this.minAlphaBeta(alpha, beta);
                        this.board[i] = '-';
                        if (m > maxv) {
                            maxv = m;
                            px = i;
                        }
                        if (maxv >= beta) {
                            return [maxv, px];
                        }
                        if (maxv > alpha) {
                            alpha = maxv;
                        }
                    }
                }
                return [maxv, px];
            }

            minAlphaBeta(alpha, beta) {
                let minv = Infinity;
                let qx = null;
                const result = this.isEndOfGame();
                if (result === 'X') {
                    return [-1, 0];
                } else if (result === 'O') {
                    return [1, 0];
                } else if (result === '-') {
                    return [0, 0];
                }

                for (let i = 0; i < 9; i++) {
                    if (this.board[i] === '-') {
                        this.board[i] = 'X';
                        const [m, _] = this.maxAlphaBeta(alpha, beta);
                        this.board[i] = '-';
                        if (m < minv) {
                            minv = m;
                            qx = i;
                        }
                        if (minv <= alpha) {
                            return [minv, qx];
                        }
                        if (minv < beta) {
                            beta = minv;
                        }
                    }
                }
                return [minv, qx];
            }

            handleClick(index) {
                if (this.board[index] === '-' && this.result === null) {
                    this.board[index] = this.playerTurn;
                    this.playerTurn = this.playerTurn === 'X' ? 'O' : 'X';
                    this.result = this.isEndOfGame();
                    this.drawBoard();
                    if (this.result !== null) {
                        this.showResult();
                    } else if (this.playerTurn === 'O') {
                        setTimeout(() => this.playAlphaBeta(), 500);  // Adding a delay for better UX
                    }
                }
            }

            playAlphaBeta() {
                const [_, bestMove] = this.maxAlphaBeta(-Infinity, Infinity);
                if (bestMove !== null) {
                    this.board[bestMove] = 'O';
                    this.playerTurn = 'X';
                    this.result = this.isEndOfGame();
                    this.drawBoard();
                    if (this.result !== null) {
                        this.showResult();
                    }
                }
            }

            showResult() {
                if (this.result === 'X') {
                    alert('The winner is X!');
                } else if (this.result === 'O') {
                    alert('The winner is O!');
                } else if (this.result === '-') {                    alert('It is a tie!');
                }
            }
        }

        // Initialize the game when the page is loaded
        window.onload = () => {
            new TicTacToe();
        };
    </script>
</body>
</html>
